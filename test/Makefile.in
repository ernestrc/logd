CC=@CC@
CFLAGS=@CFLAGS@ @EXTRA_CFLAGS@
LDFLAGS=@LDFLAGS@ @EXTRA_LDFLAGS@
LIBS=@LIBS@
FUZZFLAGS=@FUZZFLAGS@ # fuzzer flags
LUAJIT= @LUAJITBIN@
LOGD_BUF_MAX_CAP=@LOGD_BUF_MAX_CAP@
LOGD_BUF_INIT_CAP=@LOGD_BUF_INIT_CAP@
LOGD_SLAB_CAP=@LOGD_SLAB_CAP@
ROOT_DIR=@ROOT_DIR@
BINDIR = $(ROOT_DIR)/bin
LIBDIR=$(ROOT_DIR)/lib


TESTS=$(wildcard test_*.c)
LUA_TESTS=$(wildcard test_*.lua)
INT_TESTS=$(wildcard test_*.sh)
FUZZERS=$(wildcard fuzz_*.c)
TARGET_TESTS = $(addprefix $(BINDIR)/,$(patsubst %.c,%,$(TESTS)))
TARGET_FUZZERS = $(addprefix $(BINDIR)/,$(patsubst %.c,%,$(FUZZERS)))
# TODO also add int tests prof data
# TARGET_TPROFILES = $(addprefix $(BINDIR)/,$(patsubst %.c,%.profraw,$(TESTS))) $(addprefix $(BINDIR)/,$(patsubst %.lua,%.lua.profraw,$(LUA_TESTS)))
TARGET_TPROFILES = $(addprefix $(BINDIR)/,$(patsubst %.c,%.profraw,$(TESTS)))
TARGET_FPROFILES = $(addprefix $(BINDIR)/,$(patsubst %.c,%.profraw,$(FUZZERS)))

LIB = $(LIBDIR)/liblogd.a
SO = $(LIBDIR)/logd.so
LINK_SO = $(ROOT_DIR)/test/logd.so
EXEC = $(BINDIR)/logd

# a regular lua interpreter should suffice but
# we compile a test runner with instrumentation so lua tests are 
# considered for code coverage
LUNIT_RUNNER=$(ROOT_DIR)/test/lunit/extra/lunit.sh
LUNIT_FLAGS ?= --interpreter $(LUAJIT)
LUA_PATH=./?.lua;./lunit/lua/?.lua;

TESTPROFDATA=$(BINDIR)/tests.profdata
FUZZPROFDATA=$(BINDIR)/fuzz.profdata

.PHONY: clean test fuzz coverage html-coverage fuzz-coverage fuzz-html-coverage purge

test: unit_test $(LINK_SO) lua_test int_test

$(LINK_SO):
	@ ln -s $(SO) $(LINK_SO)

unit_test: $(TARGET_TESTS)
	@ for f in $^; do echo "  TEST	$$f" && LLVM_PROFILE_FILE="$$f.profraw" $$f --silent; done

int_test: $(INT_TESTS)
	@ for f in $^; do echo "  TEST	$$f" && LOGD_SLAB_CAP=$(LOGD_SLAB_CAP) LOGD_BUF_MAX_CAP=$(LOGD_BUF_MAX_CAP) ./$$f 2>&1; done

lua_test: $(LUA_TESTS)
	@ for f in $^; do echo "  TEST	$$f" && LUA_PATH="$(LUA_PATH)" LLVM_PROFILE_FILE="$(BINDIR)/$$f.profraw" $(LUNIT_RUNNER) $(LUNIT_FLAGS) $$f 2>/dev/null 1>/dev/null; done

$(BINDIR)/test_%: test_%.c $(LIB)
	$(CC) $(LDFLAGS) $(CFLAGS) $(addprefix ../src/,$(patsubst test_%.c, %.c, $<)) $< -o $@ $(LIB)

$(TESTPROFDATA): $(TARGET_TESTS)
	llvm-profdata merge -sparse $(TARGET_TPROFILES) -o $(TESTPROFDATA)

coverage: $(TESTPROFDATA)
	llvm-cov report -instr-profile=$(TESTPROFDATA) $(addprefix -object ,$(TARGET_TESTS))

html-coverage: $(TESTPROFDATA) BROWSER
	llvm-cov show -format=html -instr-profile=$(TESTPROFDATA) $(addprefix -object ,$(TARGET_TESTS)) > $(BINDIR)/coverage.html
	@$(BROWSER) $(BINDIR)/coverage.html

fuzz: $(TARGET_FUZZERS)
	@ for f in $^; do mkdir -p $$f.corpus && LLVM_PROFILE_FILE="$$f.profraw" $$f $$f.corpus $(FUZZFLAGS); done; wait

# clang version >= April 2017 required (tested with 6.0.0 trunk 310227)
$(BINDIR)/fuzz_%: fuzz_%.c $(LIB)
	$(CC) $(LDFLAGS) $(CFLAGS) -fsanitize=fuzzer $(addprefix ../src/,$(patsubst fuzz_%.c, %.c, $<)) $< -o $@ $(LIB)

$(FUZZPROFDATA): $(TARGET_FUZZERS)
	llvm-profdata merge -sparse $(TARGET_FPROFILES) -o $(FUZZPROFDATA)

fuzz-coverage: $(FUZZPROFDATA)
	llvm-cov report -instr-profile=$(FUZZPROFDATA) $(addprefix -object ,$(TARGET_FUZZERS))

fuzz-html-coverage: $(FUZZPROFDATA) BROWSER
	llvm-cov show -format=html -instr-profile=$(FUZZPROFDATA) $(addprefix -object ,$(TARGET_FUZZERS)) > $(BINDIR)/fuzz-coverage.html
	@$(BROWSER) $(BINDIR)/fuzz-coverage.html

clean:
	@rm -f $(TARGET_TESTS) $(TARGET_FUZZERS) $(FUZZPROFDATA) $(TESTPROFDATA) $(TARGET_TPROFILES) $(TARGET_FPROFILES) $(LINK_SO)
	@ rm -f *.profraw

BROWSER:
ifndef BROWSER
	$(error BROWSER env variable is undefined)
endif

purge: clean
